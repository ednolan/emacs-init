;; -*- mode: Emacs-Lisp;

;; keybinding ref

;; editing
;; Set mark (C-`)
;; Rectangle mark mode (C-x `)
;; Endless fill/unfill paragraph (M-q)

;; navigation
;; Move betweeen buffers in a single frame (M-<arrow>)
;;  note: org-mode overrides this
;; Scroll buffer without scolling cursor (shift-<up/down>)

;; Quit window (C-c q)

;; Sort lines (C-c s)

;; Reverse region (C-c %)

;; Pop mark (M-`)

;; Show path to current file (C-c /)

;; Replace whitespace in region with single spaces (C-c _)

;; avy
;; Goto word (C-d)

;; buffers
;; Invoke buffer selection menu (C-x C-b)
;; Revert buffer without confirmation (F5)

;; define-word
;; Define word (C-c d)

;; dired
;; Create empty file (f7)

;; frames
;; Other frame (f2)

;; flycheck
;; Next error (M-g n)
;; Previous error (M-g p)

;; menu bar
;; Text-mode emulation menu bar (f10)
;; Open menu bar (M-M)

;; magit
;; Magit status (C-x g)
;; Magit find file (C-c v f)

;; neuron
;; Insert zettel link (C-c C-q)
;; Toggle connection type (C-c C-y)
;; Query tags (C-c C-m)
;; Insert new zettel (C-c C-i)
;; Refresh (C-c C-w)

;; projectile
;; Helm-projectile (C-c p h)
;; Helm-projectile switch project (C-c p p)

;; origami
;; Close node (C-c n c)
;; Open node (C-c n o)
;; Close node recursively (C-c n -)
;; Open node recursively (C-c n +)
;; Next fold (C-c n n)
;; Previous fold (C-c n p)

;; smerge
;; Prev conflict (C-c m p)
;; Next conflict (C-c m n)
;; Keep ours (C-c m o)
;; Keep theirs (C-c m t)

;; string-inflection
;; To snake case (C-c C-s)
;; To all caps snake case (C-c C-h)
;; To pascal case (C-c C-u)
;; To lowercase camel case (C-c C-l)

;; text mode
;; Enter text mode (C-c f)

;; C-` to set mark
(global-set-key (kbd "C-`") 'set-mark-command)
(global-set-key (kbd "C-x `") 'rectangle-mark-mode)

;; meta-arrow to move between buffers
(global-set-key [M-left] 'windmove-left)
(global-set-key [M-right] 'windmove-right)
(global-set-key [M-up] 'windmove-up)
(global-set-key [M-down] 'windmove-down)

;; Shift + up/down to scroll buffer without moving cursor
(defun gcm-scroll-down ()
      (interactive)
      (scroll-up 1))
    (defun gcm-scroll-up ()
      (interactive)
      (scroll-down 1))
(global-set-key [(shift down)] 'gcm-scroll-down)
(global-set-key [(shift up)]   'gcm-scroll-up)

(global-set-key (kbd "C-c q") 'quit-window)

(global-set-key (kbd "C-c s") 'sort-lines)

(global-set-key (kbd "C-c %") 'reverse-region)

(global-set-key (kbd "M-`") (kbd "C-u C-`"))

(global-set-key (kbd "C-c /") (lambda () (interactive) (message (buffer-file-name))))

;; Nicer C-x C-b
(global-set-key (kbd "C-x C-b") 'bs-show)

;; F5 to revert-buffer without confirmation
(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive) (revert-buffer t t))
(global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)

;; F2 to switch frames
(global-set-key (kbd "<f2>") 'other-frame)

;; Text mode keybinding
(global-set-key (kbd "C-c f") 'text-mode)

;; Move around menu bar keybindings to make room to use M-` for popping the mark
(global-set-key (kbd "M-M") 'menu-bar-open)
(global-set-key (kbd "<f10>") 'tmm-menubar)

;; col numbers
(setq column-number-mode t)

;; line numbers
(global-display-line-numbers-mode t)

;; tabs
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default tab-stop-list (number-sequence 4 200 4))

;; cursor
(setq-default cursor-type 'bar)

;; annoying startup messages
(setq inhibit-splash-screen t)
(setq inhibit-startup-echo-area-message "eddie")
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

;; delete selection mode
(delete-selection-mode 1)

;; yes/no -> y/n
(setq use-short-answers t)

;; mouse support in terminal mode
(xterm-mouse-mode t)

;; fill column
(setq-default fill-column 90)
(global-display-fill-column-indicator-mode t)

;; remove vertical border between buffers
(set-face-attribute 'vertical-border
                    nil
                    :foreground "gray")

;; interpret files as utf-8 encoded by default
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

;; better highlight color
(set-face-attribute 'region nil :background "#a9d1ff")

;; so long mode
(global-so-long-mode 1)

;; custom theme
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

(defun set-todays-theme ()
  (let* ((theme-names '(cyberpunk gruber-darker intellij jsc-dark
                       mac-classic marine mistyday organic-green oswald overcast paper
                       toxi white))
         (epoch-to-midnight-utc-secs
          (if (or (eq system-type 'darwin)
                  (eq system-type 'berkeley-unix))
              (string-to-number
               (shell-command-to-string
                "date -u -j -f'%Y-%m-%d %H:%M:%S' \"$(date +%Y-%m-%d) 00:00:00\" +%s"))
            (string-to-number
             (shell-command-to-string "date --utc --date '' +%s"))))
         (daily-theme-index
          (string-to-number
           (shell-command-to-string
            (concat "echo \"$(echo "
                    (number-to-string epoch-to-midnight-utc-secs)
                    " | cksum | cut -d' ' -f1) % "
                    (number-to-string (length theme-names))
                    "\" | bc")))))
      (if (boundp 'daily-theme)
          (disable-theme daily-theme))
      (setq daily-theme (nth daily-theme-index theme-names)))
  (load-theme daily-theme t))

(set-todays-theme)
(run-at-time "00:01" 86400 'set-todays-theme)

;; scratch buffer to text mode
(setq initial-major-mode 'text-mode)

;; save Customize settings in separate .el file
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file :noerror)

;; .h, .cc, and .inl files are c++
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cc\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))

;; Don't use F1 for help menu
(global-unset-key (kbd "<f1>"))

;; Mouse scroll in terminal mode
(global-set-key (kbd "<mouse-4>") 'scroll-down-line)
(global-set-key (kbd "<mouse-5>") 'scroll-up-line)

;; TAGS file annoyance
(setq tags-revert-without-query 1)

;; Recognize Makefile.foo
(add-to-list 'auto-mode-alist '("\\(/\\|\\`\\)[Mm]akefile" . makefile-gmake-mode))

;; Recognize foo.yml
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

;; prompt to add missing newlines on saving
(setq-default require-final-newline "ask")

;; use ssh with tramp by default (saves typing "ssh:")
(setq tramp-default-method "ssh")

;; dired switches
(setq dired-listing-switches "-alh")

;; gdb restores window config
(setq gdb-restore-window-configuration-after-quit t)

;; override built-in query-replace keybinding with this logic:
;; if there is a currently active highlight, and that highlight:
;; - contains no newline characters
;; - is less than 90 characters long
;; then use the contents of that highlight as the string to replace
;; otherwise fallback to normal query-replace
(defun region-contents-string ()
  (if (region-active-p)
      (buffer-substring (region-beginning) (region-end))))
(defun query-replace-region ()
  (interactive)
  (let ((search-start-point (region-beginning))
        (to-replace (region-contents-string)))
    (if (and to-replace
             (< (length to-replace) 90)
             (not (string-match-p "\n" to-replace)))
        (progn
          (goto-char search-start-point)
          (deactivate-mark)
          (query-replace to-replace
                         (read-string (concat "Query replace " to-replace " with: "))))
      (call-interactively 'query-replace))))
(global-set-key (kbd "M-%") 'query-replace-region)

;; prompt before quitting
;; https://emacs.stackexchange.com/a/30475
(defun ask-before-closing ()
  "Close only if y was pressed."
  (interactive)
  (if (y-or-n-p (format "Are you sure you want to close this frame? "))
      (save-buffers-kill-emacs)
    (message "Canceled frame close")))

(global-set-key (kbd "C-x C-c") 'ask-before-closing)

;; just-one-space-in-region
;; https://stackoverflow.com/a/8674989
(defun just-one-space-in-region (beg end)
  "replace all whitespace in the region with single spaces"
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (while (re-search-forward "\\s-+" nil t)
        (replace-match " ")))))

(global-set-key
 (kbd "C-c _")
 (lambda () (interactive) (just-one-space-in-region (region-beginning) (region-end))))

;; fill/unfill paragraph toggle with M-q
(defun endless/fill-or-unfill ()
  "Like `fill-paragraph', but unfill if used twice."
  (interactive)
  (let ((fill-column
         (if (eq last-command 'endless/fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))

(global-set-key [remap fill-paragraph]
                #'endless/fill-or-unfill)

;; don't prompt that file changed on disk based solely on timestamp
;; credit to Stack Overflow user doublep
;; https://stackoverflow.com/a/29556894
;; Ignore modification-time-only changes in files, i.e. ones that
;; don't really change the contents.  This happens often with
;; switching between different VC buffers.
(defun update-buffer-modtime-if-byte-identical ()
  (let* ((size      (buffer-size))
         (byte-size (position-bytes size))
         (filename  buffer-file-name))
    (when (and byte-size (<= size 1000000))
      (let* ((attributes (file-attributes filename))
             (file-size  (nth 7 attributes)))
        (when (and file-size
                   (= file-size byte-size)
                   (string= (buffer-substring-no-properties 1 (1+ size))
                            (with-temp-buffer
                              (insert-file-contents filename)
                              (buffer-string))))
          (set-visited-file-modtime (nth 5 attributes))
          t)))))

(defun verify-visited-file-modtime--ignore-byte-identical (original &optional buffer)
  (or (funcall original buffer)
      (with-current-buffer buffer
        (update-buffer-modtime-if-byte-identical))))
(advice-add 'verify-visited-file-modtime :around #'verify-visited-file-modtime--ignore-byte-identical)

(defun ask-user-about-supersession-threat--ignore-byte-identical (original &rest arguments)
  (unless (update-buffer-modtime-if-byte-identical)
    (apply original arguments)))
(advice-add 'ask-user-about-supersession-threat :around #'ask-user-about-supersession-threat--ignore-byte-identical)

;; https://stackoverflow.com/a/46273760
(defun find-file--line-number (orig-fun filename &optional wildcards)
  "Turn files like file.cpp:14 into file.cpp and going to the 14-th line."
  (save-match-data
    (let* ((matched (string-match "^\\(.*\\):\\([0-9]+\\):?$" filename))
           (line-number (and matched
                             (match-string 2 filename)
                             (string-to-number (match-string 2 filename))))
           (filename (if matched (match-string 1 filename) filename)))
      (apply orig-fun (list filename wildcards))
      (when line-number
        ;; goto-line is for interactive use
        (goto-char (point-min))
        (forward-line (1- line-number))))))

(advice-add 'find-file :around #'find-file--line-number)

;; https://old.reddit.com/r/spacemacs/comments/q0eqcd/how_to_get_my_magit_keybindings_back_mode/hgegkt6/
;; https://stackoverflow.com/a/51117995
(setq auto-mode-alist (delete '("/COMMIT_EDITMSG$" . helm-ls-git-commit-mode) auto-mode-alist))
(setq auto-mode-alist (delete '("/git-rebase-todo$" . helm-ls-git-rebase-todo-mode) auto-mode-alist))

;; major mode hooks
;; delete trailing whitespace
;; configure tabination

(defun delete-trailing-whitespace-if-not-markdown ()
  (when (not (or (derived-mode-p 'markdown-mode)))
    (delete-trailing-whitespace)))

;; all
(defun setup-common ()
  (add-to-list 'write-file-functions 'delete-trailing-whitespace-if-not-markdown)
  )
;; bash
(add-hook 'sh-mode-hook 'setup-common)
;; Emacs Lisp
(add-hook 'emacs-lisp-mode-hook 'setup-common)
;; Dired
(defun setup-dired-mode ()
  (local-set-key (kbd "<f7>") 'dired-create-empty-file)
  )
(add-hook 'dired-mode-hook 'setup-dired-mode)
(defun setup-git-commit-mode ()
  (setq fill-column 70))
(add-hook 'git-commit-setup-hook 'setup-git-commit-mode)
;; HTML
(defun setup-html-mode ()
  (set (make-local-variable 'sgml-basic-offset) 4))
(add-hook 'html-mode-hook 'setup-common)
(add-hook 'html-mode-hook 'setup-html-mode)
;; Markdown
(add-hook 'markdown-mode-hook 'setup-common)
;; Python
(defun setup-python-mode ()
  (setq tab-width 4)
  )
(add-hook 'python-mode-hook 'setup-common)
(add-hook 'python-mode-hook 'setup-python-mode)
;; Smerge
(defun setup-smerge-mode ()
  (local-set-key (kbd "C-c m p") 'smerge-prev)
  (local-set-key (kbd "C-c m n") 'smerge-next)
  (local-set-key (kbd "C-c m o") 'smerge-keep-upper)
  (local-set-key (kbd "C-c m t") 'smerge-keep-lower)
  )
(add-hook 'smerge-mode-hook 'setup-common)
(add-hook 'smerge-mode-hook 'setup-smerge-mode)
;; Text
(defun setup-text-mode ()
  (setq indent-line-function (quote insert-tab))
  (electric-indent-local-mode -1))
(add-hook 'text-mode-hook 'setup-common)
(add-hook 'text-mode-hook 'setup-text-mode)

;; package management
;; melpa
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/")
   t)
  (package-initialize))
;; use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(setq use-package-always-ensure t)

;; file backups
(use-package backup-each-save
  :config
  (setq backup-inhibited t)
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (add-hook 'after-save-hook 'backup-each-save)
)

;; cleaner mode lines
(use-package diminish)

;; helper for mode remappings
(use-package bind-key)

;; transpose-frame
(use-package transpose-frame)

;; avy
(use-package avy
  :config
  (bind-key* "C-d" 'avy-goto-char-2)
  (setq-default avy-all-windows nil)
  )

;; string-inflection
(use-package string-inflection
  :init
  (bind-keys*
   ("C-c C-s" . string-inflection-underscore)
   ("C-c C-h" . string-inflection-upcase)
   ("C-c C-u" . string-inflection-camelcase)
   ("C-c C-l" . string-inflection-lower-camelcase))
  )

;; evil-numbers
(use-package evil-numbers
  :bind (("C-c +" . evil-numbers/inc-at-pt)
         ("C-c -" . evil-numbers/dec-at-pt)))

;; clipetty
;; (hook into system paste buffer using OSC 52)
(use-package clipetty
  :hook (after-init . global-clipetty-mode))

;; helm
(use-package helm
  :config
  (helm-mode 1)
  (add-to-list 'helm-completing-read-handlers-alist '(find-file))
  (add-to-list 'helm-completing-read-handlers-alist '(write-file))
  (add-to-list 'helm-completing-read-handlers-alist '(dired-do-copy))
  (add-to-list 'helm-completing-read-handlers-alist '(dired-do-rename)))
(use-package helm-projectile)
(use-package helm-ls-git
  :bind (("C-x C-d" . helm-browse-project))
  )

;; projectile
(use-package projectile
  ;; https://www.reddit.com/r/emacs/comments/6vhxim/projectile_key_bindings_are_not_activated_until_a/dm0e1x3
  :bind-keymap ("C-c p" . projectile-command-map)
  :config
  (projectile-mode)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'helm)
  ;; this indexing method is required so that .projectile can be used to ignore files
  ;; https://docs.projectile.mx/projectile/projects.html#ignoring-files
  (setq projectile-indexing-method 'hybrid)
  (helm-projectile-on)
  )

;; need quelpa-use-package to grab my own fork of helm-rg
(use-package quelpa)
(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "https://github.com/quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)
(quelpa-use-package-activate-advice)
(use-package helm-rg
  :quelpa (helm-rg :fetcher github :repo "ednolan/helm-rg")
  :bind (("C-c r" . helm-rg)
         ("C-c g" . helm-projectile-rg))
  :custom
  (helm-rg-thing-at-point nil)
  :custom-face
  (helm-rg-file-match-face ((t (:foreground "black" :underline t)))))

;; origami
(use-package origami
  :bind (("C-c n c" . origami-close-node)
         ("C-c n o" . origami-open-node)
         ("C-c n -" . origami-close-node-recursively)
         ("C-c n +" . origami-open-node-recursively)
         ("C-c n n" . origami-next-fold)
         ("C-c n p" . origami-previous-fold))
  )

;; magit
(use-package magit
  :bind (("C-x g" . magit-status)
         ("C-c v f" . magit-find-file))
  :custom
  (magit-list-refs-sortby "-creatordate")
  (magit-diff-refine-hunk 'all)
  )

;; org
(use-package org)

;; define-word
(use-package define-word
  :bind (("C-c d" . define-word-at-point))
  )

;; programming languages

;; Markdown
(use-package markdown-mode
  :mode (("\\.md\\'" . markdown-mode))
  :init (setq markdown-command "pandoc --from commonmark --to html5 -s")
  )

;; yaml
(use-package yaml-mode)

;; custom utilities

(load-file (expand-file-name "~/.emacs.d/git-util.el"))

(if (and
     (file-exists-p (expand-file-name "~/.emacs.d/feedly-token.el"))
     (file-exists-p (expand-file-name "~/.emacs.d/feedly/feedly.el")))
    (progn
      (load-file (expand-file-name "~/.emacs.d/feedly-token.el"))
      (load-file (expand-file-name "~/.emacs.d/feedly/feedly.el"))))

(load-file (expand-file-name "~/.emacs.d/macroutil.el"))
(global-set-key (kbd "<f8>") 'macroutil-end-and-process-macro-or-exec-named-macro)
(global-set-key (kbd "C-c k p") 'macroutil-process-last-macro)
(global-set-key (kbd "C-c k s") 'macroutil-store-named-macro)
(global-set-key (kbd "C-c k n") 'macroutil-name-and-store-register-macro)
(global-set-key (kbd "C-c k a") 'macroutil-assign-named-macro-to-register)
(global-set-key (kbd "C-c k 0") 'macroutil-register-0)
(global-set-key (kbd "C-c k 1") 'macroutil-register-1)
(global-set-key (kbd "C-c k 2") 'macroutil-register-2)
(global-set-key (kbd "C-c k 3") 'macroutil-register-3)
(global-set-key (kbd "C-c k 4") 'macroutil-register-4)
(global-set-key (kbd "C-c k 5") 'macroutil-register-5)
(global-set-key (kbd "C-c k 6") 'macroutil-register-6)
(global-set-key (kbd "C-c k 7") 'macroutil-register-7)
(global-set-key (kbd "C-c k 8") 'macroutil-register-8)
(global-set-key (kbd "C-c k 9") 'macroutil-register-9)

(load-file (expand-file-name "~/.emacs.d/macroutil-macros.el"))

;; -*- mode: Emacs-Lisp;

;; keybinding ref

;; editing
;; Set mark (C-`)
;; Rectangle mark mode (C-x `)
;; Endless fill/unfill paragraph (M-q)

;; navigation
;; Move betweeen buffers in a single frame (M-<arrow>)
;;  note: org-mode overrides this
;; Scroll buffer without scolling cursor (shift-<up/down>)

;; buffers
;; Invoke buffer selection menu (C-x C-b)
;; Revert buffer without confirmation (F5)

;; avy
;; Goto word (C-d)

☣️💠;; c++
;; Tab to tab stop (M-tab) (Linux: C-M-i)
;; Insert four spaces (M-shift-tab) (Linux: C-M-y)

☣️💠🍎;; company
;; Complete (C-v)

✴️;; define-word
;; Define word (C-c d)

;; frames
;; Other frame (f2)

;; flycheck
;; Next error (M-g n)
;; Previous error (M-g p)

;; fundamental mode
;; Enter fundamental mode (C-c f)

;; menu bar
;; Text-mode emulation menu bar (f10)
;; Open menu bar (M-M)

;; helm
;; Helm git grep (C-c g)
;; Helm git grep custom project directory (C-c C-j)

☣️;; ledgerutil
;; Suggest category for transaction (C-c l c)
;; Add transaction to category suggestion mapping (C-c l i)

✴️;; magit
;; Magit status (C-x g)
;; Magit find file (C-c v f)

;; projectile
;; Helm-projectile (C-c p h)
;; Helm-projectile switch project (C-c p p)

☣️💠;; ccls
;; Find symbol at point (M-` g g)
;; Find all references at point (M-` g r)
;; Restart server (M-` s r)
;; Find definition of type of symbol at point (M-` g t)

✴️;; smerge
;; Prev conflict (C-c m p)
;; Next conflict (C-c m n)
;; Keep ours (C-c m o)
;; Keep theirs (C-c m t)

;; string-inflection
;; To snake case (C-c C-s)
;; To all caps snake case (C-c C-h)
;; To pascal case (C-c C-u)
;; To lowercase camel case (C-c C-l)

;; dired
;; Create empty file (f7)

;; C-` to set mark
(global-set-key (kbd "C-`") 'set-mark-command)
(global-set-key (kbd "C-x `") 'rectangle-mark-mode)

;; meta-arrow to move between buffers
(global-set-key [M-left] 'windmove-left)
(global-set-key [M-right] 'windmove-right)
(global-set-key [M-up] 'windmove-up)
(global-set-key [M-down] 'windmove-down)

;; Shift + up/down to scroll buffer without moving cursor
(defun gcm-scroll-down ()
      (interactive)
      (scroll-up 1))
    (defun gcm-scroll-up ()
      (interactive)
      (scroll-down 1))
(global-set-key [(shift down)] 'gcm-scroll-down)
(global-set-key [(shift up)]   'gcm-scroll-up)

;; Nicer C-x C-b
(global-set-key (kbd "C-x C-b") 'bs-show)

;; F5 to revert-buffer without confirmation
(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive) (revert-buffer t t))
(global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)

;; F2 to switch frames
(global-set-key (kbd "<f2>") 'other-frame)

;; Fundamental mode keybinding
(global-set-key (kbd "C-c f") 'fundamental-mode)

;; Move around menu bar keybindings to make room to use M-` for ide prefix
(global-set-key (kbd "M-M") 'menu-bar-open)
(global-set-key (kbd "<f10>") 'tmm-menubar)

;; col numbers
(setq column-number-mode t)

;; line numbers
(global-linum-mode t)
(defadvice linum-update-window (around linum-dynamic activate)
  (let* ((w (length (number-to-string
                     (count-lines (point-min) (point-max)))))
         (linum-format (concat " %" (number-to-string w) "d ")))
    ad-do-it))

;; tabs
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default tab-stop-list (number-sequence 4 200 4))

;; cursor
(setq-default cursor-type 'bar)

;; annoying startup messages
(setq inhibit-splash-screen t)
☣️💾(setq inhibit-startup-echo-area-message "eddie")
🍎🍏💠(setq inhibit-startup-echo-area-message "enolan")
✴️(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

;; delete selection mode
(delete-selection-mode 1)

;; yes/no -> y/n
(defalias 'yes-or-no-p 'y-or-n-p)

;; mouse support in terminal mode
(xterm-mouse-mode t)

;; fill column indicator
(global-display-fill-column-indicator-mode t)
(setq-default display-fill-column-indicator-column 90)

;; remove vertical border between buffers
(set-face-attribute 'vertical-border
                    nil
                    :foreground "gray")

;; interpret files as utf-8 encoded by default
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

;; better highlight color
(set-face-attribute 'region nil :background "#a9d1ff")

;; so long mode
(global-so-long-mode 1)

;; custom theme
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

(defun set-todays-theme ()
☣️💾🍎  (let* ((theme-names '(cyberpunk gruber-darker intellij jsc-dark
                       lavender mac-classic marine mistyday
                       organic-green oswald overcast paper
                       toxi white))
💠🍏  (let* ((theme-names '(mac-classic))
✴️         (epoch-to-midnight-utc-secs
          (if (eq system-type 'darwin)
              (string-to-number
               (shell-command-to-string
                "date -u -j -f'%Y-%m-%d %H:%M:%S' \"$(date +%Y-%m-%d) 00:00:00\" +%s"))
            (string-to-number
             (shell-command-to-string "date --utc --date '' +%s"))))
         (daily-theme-index
          (string-to-number
           (shell-command-to-string
            (concat "echo \"$(echo "
                    (number-to-string epoch-to-midnight-utc-secs)
                    " | cksum | cut -d' ' -f1) % "
                    (number-to-string (length theme-names))
                    "\" | bc")))))
      (if (boundp 'daily-theme)
          (disable-theme daily-theme))
      (setq daily-theme (nth daily-theme-index theme-names)))
  (load-theme daily-theme t))

(set-todays-theme)
(run-at-time "00:01" 86400 'set-todays-theme)

;; scratch buffer to text mode
(setq initial-major-mode 'text-mode)

;; save Customize settings in separate .el file
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file :noerror)

;; .h, .cc, and .inl files are c++
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cc\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))

☣️;; .ino files are c++
(add-to-list 'auto-mode-alist '("\\.ino\\'" . c++-mode))

✴️;; Don't use F1 for help menu
(global-unset-key (kbd "<f1>"))

;; Mouse scroll in terminal mode
(global-set-key (kbd "<mouse-4>") 'scroll-down-line)
(global-set-key (kbd "<mouse-5>") 'scroll-up-line)

;; TAGS file annoyance
(setq tags-revert-without-query 1)

;; Recognize Makefile.foo
(add-to-list 'auto-mode-alist '("\\(/\\|\\`\\)[Mm]akefile" . makefile-gmake-mode))

;; Recognize foo.yml
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

🍎🍏💠;; mac os maps <insert> to <help> ???
(global-set-key (kbd "<help>") 'overwrite-mode)

🍎🍏;; home/end keys on mac
(define-key global-map [home] 'beginning-of-line)
(define-key global-map [end] 'end-of-line)

;; ctrl/cmd on mac
(setq mac-command-modifier 'control)

✴️;; prompt to add missing newlines on saving
(setq-default require-final-newline "ask")

;; use ssh with tramp by default (saves typing "ssh:")
(setq tramp-default-method "ssh")

🍎💠☣️;; registers for commonly used files
🍎(set-register ?t (cons 'file "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/inbox.org"))
(set-register ?s (cons 'file "~/Library/Mobile Documents/com~apple~CloudDocs/shopping-list.org"))
💠(set-register ?t (cons 'file "~/sync/todo/todo.org"))
☣️(set-register ?f (cons 'file "~/financial/ledger/edward.ledger"))

✴️;; prompt before quitting
;; https://emacs.stackexchange.com/a/30475
(defun ask-before-closing ()
  "Close only if y was pressed."
  (interactive)
  (if (y-or-n-p (format "Are you sure you want to close this frame? "))
      (save-buffers-kill-emacs)
    (message "Canceled frame close")))

(global-set-key (kbd "C-x C-c") 'ask-before-closing)

✴️;; fill/unfill paragraph toggle with M-q
(defun endless/fill-or-unfill ()
  "Like `fill-paragraph', but unfill if used twice."
  (interactive)
  (let ((fill-column
         (if (eq last-command 'endless/fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))

(global-set-key [remap fill-paragraph]
                #'endless/fill-or-unfill)

✴️;; don't prompt that file changed on disk based solely on timestamp
;; credit to Stack Overflow user doublep
;; https://stackoverflow.com/a/29556894
;; Ignore modification-time-only changes in files, i.e. ones that
;; don't really change the contents.  This happens often with
;; switching between different VC buffers.
(defun update-buffer-modtime-if-byte-identical ()
  (let* ((size      (buffer-size))
         (byte-size (position-bytes size))
         (filename  buffer-file-name))
    (when (and byte-size (<= size 1000000))
      (let* ((attributes (file-attributes filename))
             (file-size  (nth 7 attributes)))
        (when (and file-size
                   (= file-size byte-size)
                   (string= (buffer-substring-no-properties 1 (1+ size))
                            (with-temp-buffer
                              (insert-file-contents filename)
                              (buffer-string))))
          (set-visited-file-modtime (nth 5 attributes))
          t)))))

(defun verify-visited-file-modtime--ignore-byte-identical (original &optional buffer)
  (or (funcall original buffer)
      (with-current-buffer buffer
        (update-buffer-modtime-if-byte-identical))))
(advice-add 'verify-visited-file-modtime :around #'verify-visited-file-modtime--ignore-byte-identical)

(defun ask-user-about-supersession-threat--ignore-byte-identical (original &rest arguments)
  (unless (update-buffer-modtime-if-byte-identical)
    (apply original arguments)))
(advice-add 'ask-user-about-supersession-threat :around #'ask-user-about-supersession-threat--ignore-byte-identical)

;; https://stackoverflow.com/a/46273760
(defun find-file--line-number (orig-fun filename &optional wildcards)
  "Turn files like file.cpp:14 into file.cpp and going to the 14-th line."
  (save-match-data
    (let* ((matched (string-match "^\\(.*\\):\\([0-9]+\\):?$" filename))
           (line-number (and matched
                             (match-string 2 filename)
                             (string-to-number (match-string 2 filename))))
           (filename (if matched (match-string 1 filename) filename)))
      (apply orig-fun (list filename wildcards))
      (when line-number
        ;; goto-line is for interactive use
        (goto-char (point-min))
        (forward-line (1- line-number))))))

(advice-add 'find-file :around #'find-file--line-number)

☣️💠;; style config
(defconst mana-cpp-style
  '((c-basic-offset . ☣️4💠2☣️💠)
    (c-offsets-alist . ((innamespace . 0)
                        (access-label . -)
                        (topmost-intro . 0)
                        (arglist-intro . ++)
                        (arglist-cont-nonempty . c-lineup-arglist)
                        (comment-intro . 0)
                        (member-init-intro . +)
                        (case-label . 0)
                        (statement-case-intro . +)
                        (inline-open . 0)
                        (substatement-open . 0))))
  "MANA Tech LLC Style")

💠(load-file (expand-file-name "~/.emacs.d/bellport.el"))

✴️(load-file (expand-file-name "~/.emacs.d/git-util.el"))
(global-set-key (kbd "C-c C-j") 'git-util-helm-git-grep-custom-project-directory)

☣️(load-file (expand-file-name "~/.emacs.d/ledgerutil.el"))

☣️💠(load-file (expand-file-name "~/.emacs.d/cclsutil.el"))

✴️;; major mode hooks
;; delete trailing whitespace
;; configure tabination

;; all
(defun setup-common ()
  (add-to-list 'write-file-functions 'delete-trailing-whitespace)
  )
;; bash
(add-hook 'sh-mode-hook 'setup-common)
☣️💠;; C
(defun setup-c-mode ()
  (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  (set (make-local-variable 'c-basic-offset) 4))
(add-hook 'c-mode-hook 'setup-common)
(add-hook 'c-mode-hook 'setup-c-mode)
;; C++
(defun setup-c++-mode ()
  (global-set-key (kbd "C-M-i") 'tab-to-tab-stop)
  (defun insert-four-spaces ()
    (interactive)
    (insert "    "))
  (local-set-key (kbd "C-M-y") 'insert-four-spaces)
  (defun ff-find-other-file-ignore-headers ()
    (interactive)
    (ff-find-other-file nil t))
  (local-set-key (kbd "C-c o") 'ff-find-other-file-ignore-headers)
  (c-add-style "mana" mana-cpp-style)
  (c-set-style "mana")
  (defvar my-cpp-other-file-alist
    ☣️'(("\\.cpp\\'" (".h")) ("\\.h\\'" (".cpp"))))
    💠'(("\\.cpp\\'" (".inl"))
    ("\\.inl\\'" (".hpp"))
    ("\\.hpp\\'" (".cpp"))))
  ☣️💠(setq-default ff-other-file-alist 'my-cpp-other-file-alist)
  ;; ccls
  (setq-default ff-other-file-alist 'my-cpp-other-file-alist)
  (if (cclsutil-buffer-in-registered-directoryp)
      (progn (require 'ccls) (lsp)))
  )
(add-hook 'c++-mode-hook 'setup-common)
(add-hook 'c++-mode-hook 'setup-c++-mode)
(add-hook 'c++-mode-hook #'modern-c++-font-lock-mode)
💠;; Dockerfile
(add-hook 'dockerfile-mode-hook 'setup-common)
✴️;; Emacs Lisp
(add-hook 'emacs-lisp-mode-hook 'setup-common)
✴️;; Dired
(defun setup-dired-mode ()
  (local-set-key (kbd "<f7>") 'dired-create-empty-file)
  )
(add-hook 'dired-mode-hook 'setup-dired-mode)
☣️🍎💠;; Golang
(defun setup-go-mode ()
  ☣️🍎; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)
  ☣️🍎💠(set (make-local-variable 'tab-width) 8))
(add-hook 'go-mode-hook 'setup-common)
(add-hook 'go-mode-hook 'setup-go-mode)
✴️;; HTML
(defun setup-html-mode ()
  (set (make-local-variable 'sgml-basic-offset) 4))
(add-hook 'html-mode-hook 'setup-common)
(add-hook 'html-mode-hook 'setup-html-mode)
☣️🍎💠;; JavaScript
(defun setup-js2-mode ()
  (set (make-local-variable 'js-indent-level) ☣️🍎4💠2☣️🍎💠))
(add-hook 'js2-mode-hook 'setup-common)
(add-hook 'js2-mode-hook 'setup-js2-mode)
☣️🍎💠;; LaTeX
(add-hook 'latex-mode-hook 'setup-common)
✴️;; Markdown
(add-hook 'markdown-mode-hook 'setup-common)
☣️;; OCaml
(add-hook 'tuareg-mode-hook 'setup-common)
✴️;; Python
(defun setup-python-mode ()
  (setq tab-width 4))
(add-hook 'python-mode-hook 'setup-common)
(add-hook 'python-mode-hook 'setup-python-mode)
💠;; reStructuredText
;; We don't want to strip trailing whitespace here
;; (add-hook 'rst-mode-hook 'setup-common)
☣️;; Rust
(add-hook 'rust-mode-hook 'setup-common)
✴️;; Smerge
(defun setup-smerge-mode ()
  (local-set-key (kbd "C-c m p") 'smerge-prev)
  (local-set-key (kbd "C-c m n") 'smerge-next)
  (local-set-key (kbd "C-c m o") 'smerge-keep-upper)
  (local-set-key (kbd "C-c m t") 'smerge-keep-lower)
  )
(add-hook 'smerge-mode-hook 'setup-common)
(add-hook 'smerge-mode-hook 'setup-smerge-mode)
☣️🍎;; Swift
(add-hook 'swift-mode-hook 'setup-common)
✴️;; Text
(defun setup-text-mode ()
  (setq indent-line-function (quote insert-tab))
  (electric-indent-local-mode -1))
(add-hook 'text-mode-hook 'setup-text-mode)

✴️;; package management
;; melpa
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/")
   t)
  (package-initialize))
;; use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(setq use-package-always-ensure t)

;; file backups
(use-package backup-each-save
  :config
  (setq backup-inhibited t)
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (add-hook 'after-save-hook 'backup-each-save)
)

;; cleaner mode lines
(use-package diminish)

;; helper for mode remappings
(use-package bind-key)

;; transpose-frame
(use-package transpose-frame)

;; avy
(use-package avy
  :config
  (bind-key* "C-d" 'avy-goto-char-2)
  (setq-default avy-all-windows nil)
  )

;; string-inflection
(use-package string-inflection
  :init
  (bind-keys*
   ("C-c C-s" . string-inflection-underscore)
   ("C-c C-h" . string-inflection-upcase)
   ("C-c C-u" . string-inflection-camelcase)
   ("C-c C-l" . string-inflection-lower-camelcase))
  )

;; helm
(use-package helm
  :config (helm-mode 1)
  )

(use-package helm-projectile)
(use-package helm-git-grep
  :bind (("C-c g" . helm-git-grep))
  )

;; projectile
(use-package projectile
  ;; https://www.reddit.com/r/emacs/comments/6vhxim/projectile_key_bindings_are_not_activated_until_a/dm0e1x3
  :bind-keymap ("C-c p" . projectile-command-map)
  :config
  (projectile-mode)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on)
  )

🍎🍏;; fix mac os path issue
(use-package exec-path-from-shell
  :config
  (push "HISTFILE" exec-path-from-shell-variables)
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))

☣️💠;; company
(use-package company
  :bind (("C-v" . company-complete))
  :init
  (add-hook 'c++-mode-hook 'company-mode)
  :config
  (setq company-async-timeout 30)
  (setq company-idle-delay nil)
  )

🍎;; company
(use-package company
  :bind (("C-v" . company-complete))
  :init
  (add-hook 'swift-mode-hook 'company-mode)
  :config
  (add-to-list 'company-backends 'company-sourcekit)
  (setq company-async-timeout 30)
  (setq company-idle-delay nil)
  )

☣️💠;; flycheck
(use-package flycheck
  :defer t
  :init
  (add-hook 'c++-mode-hook 'flycheck-mode)
 )

🍎;; flycheck
(use-package flycheck
  :defer t
  :init
  (add-hook 'swift-mode-hook 'flycheck-mode)
 )

✴️;; magit
(use-package magit
  :bind (("C-x g" . magit-status)
         ("C-c v f" . magit-find-file))
  :custom (magit-list-refs-sortby "-creatordate")
  )

;; org
(use-package org)

☣️;; ledger-mode
(use-package ledger-mode
  :bind (:map ledger-mode-map
         ("TAB" . completion-at-point)))
(use-package flycheck-ledger)

✴️;; define-word
(use-package define-word
  :bind (("C-c d" . define-word-at-point))
  )

✴️;; programming languages

☣️💠;; C++

;; cmake
; Add cmake listfile names to the mode list.
(use-package cmake-mode
  :defer t
  :init
  (setq auto-mode-alist
        (append
         '(("CMakeLists\\.txt\\'" . cmake-mode))
         '(("\\.cmake\\'" . cmake-mode))
         auto-mode-alist))
  )

;; ccls and lsp
(setq lsp-keymap-prefix "M-`")
(use-package lsp-mode
  :init
  (setq lsp-enable-on-type-formatting nil)
  :commands lsp)
(use-package lsp-ui :commands lsp-ui-mode)
(use-package company-lsp :commands company-lsp)
(use-package helm-lsp :commands helm-lsp-workspace-symbol)

(use-package ccls
  :init
  ☣️(setq ccls-executable "/home/eddie/sync/setup/scripts/ccls_wrapper.sh.biohazard_sign"))
  💠(setq ccls-executable "/home/eddie/sync/setup/scripts/ccls_wrapper.sh.diamond_shape_with_a_dot_inside"))
;; modern-cpp-font-lock
(use-package modern-cpp-font-lock)

💠;; Dockerfile
(use-package dockerfile-mode)

☣️🍎💠;; Go
(use-package go-mode
  :defer t
  :init
  (require 'go-mode)
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  )

☣️🍎💠;; JavaScript

;; js2-mode
(use-package js2-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))

☣️🍎;; LaTeX
(use-package tex-mode
  :ensure auctex
  :defer t
  :init
  (setq-default TeX-engine 'xetex)
  (setq-default TeX-PDF-mode t)
  )
;; set XeTeX mode in TeX/LaTeX
(add-hook 'LaTeX-mode-hook
          (lambda()
            (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
            (setq TeX-command-default "XeLaTeX")
            (setq TeX-save-query nil)))

✴️;; Markdown
(use-package markdown-mode
  :mode (("\\.md\\'" . markdown-mode))
  :init (setq markdown-command "pandoc --from commonmark --to html5 -s")
  )

☣️;; Meson
(use-package meson-mode)

;; OCaml
;; ## added by OPAM user-setup for emacs / base ## 56ab50dc8996d2bb95e7856a6eddb17b ## you can edit, but keep this line
(require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")
;; ## end of OPAM user-setup addition for emacs / base ## keep this line

☣️;; Rust
(use-package rust-mode
  :defer t
  :init
  (require 'rust-mode)
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
)

☣️🍎;; Swift
(use-package swift-mode)

🍎;; flycheck-swift
(use-package flycheck-swift
  :config
  (flycheck-swift-setup)
  (setq flycheck-swift-sdk-path "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.2.sdk")
  (setq flycheck-swift-target "arm64-apple-ios11")
  )

(use-package company-sourcekit)

✴️;; yaml
(use-package yaml-mode)
